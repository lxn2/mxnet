// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

// mxnet wheel
mx_whl = 'dist/*.whl'
// command to start a docker container
docker_run = 'tests/ci_build/ci_build.sh'
// timeout in minutes
max_time = 60

// initialize source codes
def init_git() {
  checkout scm
}

// pack wheels for later use
def pack_whl(name, libs=mx_whl) {
  sh """
echo "Packing ${libs} into ${name}"
echo ${libs} | sed -e 's/,/ /g' | xargs md5sum
"""
  stash includes: libs, name: name
}


// unpack wheels saved before
def unpack_whl(name, libs=mx_whl) {
  unstash name
  sh """
echo "Unpacked ${libs} from ${name}"
echo ${libs} | sed -e 's/,/ /g' | xargs md5sum
"""
}

stage('Build') {
  parallel 'CU80': {
    node('p2') {
      ws('workspace/cu80') {
        init_git()
        sh "echo $PWD & ls -l"
        sh "${docker_run} cpu --dockerfile pip/Dockerfile.build tools/pip_package/build_lib.sh CU80"
        pack_whl('cu80')
      }
    }
  },
  'CPU': {
    node('p2') {
      ws('workspace/cpu') {
        init_git()
        sh "${docker_run} cpu --dockerfile pip/Dockerfile.build tools/pip_package/build_lib.sh CPU"
        pack_whl('cpu')
      }
    }
  }
}

stage('Test') {
  parallel 'CU80': {
    node('p2') {
      ws('workspace/cu80') {
        sh "echo before && ls -l *"
        init_git()
        unpack_whl('cu80')
        sh 'ls -l *'
        sh 'echo $PWD'
        sh 'echo $WORKSPACE'
        sh "${docker_run} gpu --dockerfile pip/Dockerfile.test_cu80 tools/pip_package/test_lib.sh GPU"
      }
    }
  },
  'CPU': {
    node('p2') {
      ws('workspace/cpu') {
        sh "echo before && ls -l *"
        init_git()
        unpack_whl('cpu')
        sh 'ls -l *'
        sh 'echo $PWD'
        sh 'echo $WORKSPACE'
        sh "${docker_run} cpu --dockerfile pip/Dockerfile.build tools/pip_package/test_lib.sh CPU"
      }
    }
  }
}

stage('Upload') {
  parallel 'CU80': {
    node('p2') {
      ws('workspace/cu80') {
        init_git()
        unpack_whl('cu80')
        sh 'ls -l dist/'
        sh "${docker_run} cpu --dockerfile pip/Dockerfile.build ./upload_lib.sh"
      }
    }
  }
}